WHAT'S A CLOSURE: garden gnome edition



The very basic description of a closure is simply that it is a function inside another function. However, it has access to variables outside of it, even after the outside function has completed - it's like the inside function remembers all the variables that were around it when it was created, and can use these variables when called. Variables inside the outer function can't be accessed from outside this function, but the from the outside of the outer function the inside, nested functions can be called, which can reference these variables.

Here's an example using code from http://javascriptissexy.com that I rewrote in a convoluted manner to help myself visualize it:

// here is your yard
function yard(){
	
	// and you have a garden gnome in your yard
	let yardOrnament = "gnome";

	// and here is you inside your yard, represented by some of your capabilities in regards to the yardOrnament.
	return {
		whatsInYard: function(){	
		return yardOrnament; // you can see/say what the yardOrnament is
		}
		
		changeYardOrnament: function (newOrnament){
		yardOrnament = newOrnament; //you can also change the yardOrnament, given a newOrnament
		} 
	}

}

let somePasserby = yard(); // someone who wants to interact with your yard, but they can't see what's in it 

somePasserby.whatsInYard(); // they can't see your yardOrnament so you tell them it's a "gnome"

somePasserby.changeYardOrnament("flamingo"); // and they think that's terrible, so they give you a "flamingo" to change it into

somePasserby.whatsInYard(); // they still can't see your yardOrnament, but you tell them it's a "flamingo" now



The passerby can't go into your yard and also can't see into it (the things in your yard are private variables), but by communicating with you (the functions inside the yard), it can interact with and refer to the values of the private variables. However, these values can't be seen/interacted with unless you (the functions inside the yard) are called, giving you exclusive access to these variables. 

Also of note is how the internal functions don't store the value of the outer function's variables' values; you don't actually store yardOrnament gnomes or flamingos in your body - but you can reference them.


REFERENCES:

Eloquent Javascript: http://eloquentjavascript.net/03_functions.html#c_HswoBBxUli

w3schools: http://www.w3schools.com/js/js_function_closures.asp

stack overflow: http://stackoverflow.com/questions/111102/how-do-javascript-closures-work

Javascript is Sexy: http://javascriptissexy.com/understand-javascript-closures-with-ease/

freeCodeCamp: https://medium.freecodecamp.com/lets-learn-javascript-closures-66feb44f6a44#.iqkj8tp6h

javascript.info: http://javascript.info/tutorial/closures

eli5 subreddit: https://www.reddit.com/r/explainlikeimfive/comments/wbzrb/eli5_the_concept_of_closures_in_computer_science/